Статическая и динамическая типизация
статически типизированный язык - когда переменная с определенным названием может быть только одного типа, указанного в момент создания
динамически типизированный язык - когда переменная может менять свой тип внутри одного скоупа

Существуют различные типы:
    - Переменная типа bool(boolian) принимает 2 значения True False. Существует почти во всех языках программирования
    - int числа
        0b - двоичная система в кодинге
        0o - восмиричная
        0x - шестнадцатеричная
            abcdef - числа после 9
    - Комплéксные числа - числа, которые используются в некоторых видах математики вместо обычных(расширение)
    - str(стринг, строка) - представляет собой последовательность символов, заключенных в одинарные или двойные кавычки 
        В большинстве своем это просто текст
        \n - вывод на новую строчку
        \t - таб
        \" - вывод двойные кавычки, не смотря в каких кавычках выделена строка
        т.е. \ - часть строки, а не конец строки
        f-строка, когда нужно вставить значение других переменных внутрь строки. Пример:
            my_str = f"My name is Maxim. My age is {MaxAge}"
    - float - переменная с нецелочисленными значениями
    - кастомные типы (структуры, классы)
        Инициализация класса - когда создаешь объект этого класса
        объект класса - экземпляр, обладающий таким типом, с ним можно проводить все операции, свойственные этому типу.
        self.field - переменная класса, но у каждого объекта своё значение поля
        Также существует создание функций, которые оперируют полями этого класса, такие функции называются методами этого класса
        Методы класса используются: название_объекта.название_доступного_метода

Структуры:
    - List - список. Или же набор значений.
        В него можно записывать переменные разных типов, не обязательно одного типа
        Инициализировать пустой список можно:
            - list()
            - []
        Инициализировать не пустой список:
            - [1, 1.45, 'eee', True, 1+2j]
        Если после списка *N, то список возвращается, умноженный на N раз

        Общедоступные функции, работающие со списком:
            len(list_object) - выводит длину списка
            min(list_object), max(list_object) - выводят минимальные и максимальные значения
            sorted(list_object) - выводит отсортированный список

        [::-1] - возвращает список в обратном порядке
        list_object.count(n) - выводит количество вхождений значения n
        list_object.append(n) - добавляет значение n в конец списка
        list_object.insert(N, n) - N(место), n(значение)
        list_object.remove(n) - удаляет первое вхождение значения n из списка
        list_object.clear() - удаляет все значения внутри списка
        list_object.pop(n) - достает и записывает n-й элемент в переменную
        list_object.reverse() - разворачивает(с конца)
        list_object.sort() - сортирует быстрой сортировкой(qsort)

Синтаксис:
    Каждая инструкция помещается на новую строчку
    неправильные отступы провоцируют ошибку
    Комментарии начинаются с # и до конца строки
        многотрочные комментарии начинаются с ''' и заканчиваются '''
    
    переменная начинается с алфавитного символа или подчеркивания, а состоит из алфавитно-цифровых символов и подчеркивания
    при этом название переменной не должно совпадать с названием ключевых слов языка питон, таких как:
        False, True, for, as, while, def, class, if, else, elif, import, from, and, or, not, break, continue, None, is, pass, return

    Консольный ввод и вывод:
        print() - выводит в консоль передаваемые аргументами параметры
            Если последним аргументом передать end=some_str, то аргументы будут выводиться, разделяясь строкой some_str
            Дефолтное значение разделителя /n
        input() - аргументом дается строка, которая выводится в консоль, перед тем, как получить введенные данные
            возвращает строку, введенную пользователем
    
    Арифметические операции с числами:
        + сложение двух чисел
        - вычитание двух чисел
        * умножение двух чисел
        / деление двух чисел. После операции с int возвращает float
        // целочисленное деление двух чисел. Отбрасывает дробную часть
        ** возведение в степень. Левое число возводится в степень правого
        % получение остатка от деления левого числа на правое

        and - логическое и
            False and False == False
            False and True == False
            True and False == False
            True and True == True
        or - логическое или
            False or False == False
            False or True == True
            True or False == True
            True or True == True
        not - логическое не
            not True == False
            not False == True


        операции выполняются по их приоритету:
            1. ()
            2. **
            3. Унарный + - и битовое отрицание
            4. * / // %
            5. + -
            6. Битовые сдвиги
            7. Битовое И 
            8. XOR
            9. Битовое ИЛИ 
            10. ==, !=, >, >=, <, <=, is, is not, in, not in
            11. Логическое НЕ
            12. Логическое И 
            13. Логическое ИЛИ

        